1- how to install VM ubuntu 22.04 on windows
2- https://ubuntu.com/tutorials/how-to-run-ubuntu-desktop-on-a-virtual-machine-using-virtualbox#3-install-your-image
3- lsb_release -a ### to check the release for ubuntu
4- sudo apt install openssh-server -y ### to allow ssh on ubuntu
5- sudo systemctl status ssh

#Install Java
echo "--------------------Installing Java--------------------"
Installation of Java
Jenkins requires Java to run, yet not all Linux distributions include Java by default. Additionally, not all Java versions are compatible with Jenkins.

There are multiple Java implementations which you can use. OpenJDK is the most popular one at the moment, we will use it in this guide.

Update the Debian apt repositories, install OpenJDK 17, and check the installation with the commands:

sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version
openjdk version "17.0.8" 2023-07-18
OpenJDK Runtime Environment (build 17.0.8+7-Debian-1deb12u1)
OpenJDK 64-Bit Server VM (build 17.0.8+7-Debian-1deb12u1, mixed mode, sharing)





  for github




###############
hints:
when you configure docker on Jenkins, you should use token the password, but if you configure github, you can use normal passowrd on Jenkins 
------------------------------------------------------------------------
sudo rm -rf  simple to remove empty or non empty folder
#################################################
#####to allow Jenkins to work with docker. Also jenkins deals with docker via pipeline project not freestyle project.
gamal@Ubuntu:~$  ls -lrth /var/run/docker.sock
srw-rw---- 1 root docker 0 Jul  5  2024 docker.sock
gamal@Ubuntu:~$ sudo chmod 777 docker.sock 
gamal@Ubuntu:~$ ls -lrth docker.sock
srwxrwxrwx 1 root docker 0 Jul  5  2024 docker.sock
gamal@Ubuntu:~$ newgrp docker 
=======================================================================================================
# (required) to be able to start minikube
$ sudo groupadd docker
# Add your user to the docker group, replace [user] with your username
sudo usermod -aG docker $USER    #### to avoid sudo in each time you use docker ### if you need to run many commands in one line, you can use "&&" as the following format:sudo usermod -aG docker $USER && newgrp docker
# To activate changes to the group
newgrp docker 					 ### to take effect after adding your command to docker group
sudo usermod -aG sudo $USER      #### to avoid password each time you use sudo 

sudo groupadd docker && sudo usermod -aG docker $USER && newgrp docker && sudo chmod 777 /var/run/docker.sock

gamal@Ubuntu:~/project$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
gamal@Ubuntu:~/project$
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
sudo install openssh-server -y 	### to enable ssh on ubuntu
sudo systemctl status ssh














#########################*********  Jenkins installation *******https://www.jenkins.io/doc/book/installing/linux/*****########################### 
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins

The package installation will:

Setup Jenkins as a daemon launched on start. Run systemctl cat jenkins for more details.

Create a ‘jenkins’ user to run this service.

Direct console log output to systemd-journald. Run journalctl -u jenkins.service if you are troubleshooting Jenkins.

Populate /lib/systemd/system/jenkins.service with configuration parameters for the launch, e.g JENKINS_HOME

Set Jenkins to listen on port 8080. Access this port with your browser to start configuration.

If Jenkins fails to start because a port is in use, run systemctl edit jenkins and add the following:

[Service]
Environment="JENKINS_PORT=8081"
Here, "8081" was chosen but you can put another port available.




OR



1. Check if you already have Java installed on your Ubuntu system:

java -version

Check if Java is installed on Ubuntu.
Since Java is not installed on our system, we will install it using OpenJDK.

Note: If Java is installed on your Ubuntu system, skip ahead to Step 2.

2. First, open a terminal window and update the system package repository by running:

sudo apt update

Enter your administrator password and wait for the update to complete.

3. Depending on which Java version you want to install, Java 8 or 11, run one of the following commands:

To install OpenJDK 8, run:
sudo apt install openjdk-8-jdk -y

To install OpenJDK 11, run:
sudo apt install openjdk-11-jdk -y

Step 2: Add Jenkins Repository
It is recommended to install Jenkins using the project-maintained repository, rather than from the default Ubuntu repository. The reason for that is because the Jenkins version in the default Ubuntu repository might not be the latest available version, which means it could lack the latest features and bug fixes.

Follow the steps below to add the Jenkins repository to your Ubuntu system.

1. Start by importing the GPG key. The GPG key verifies package integrity but there is no output. Run:

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null

2. Add the Jenkins software repository to the source list and provide the authentication key:

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

Step 3: Install Jenkins
After setting up the prerequisites, follow the steps below to install Jenkins on Ubuntu:

1. Update the system repository one more time. Updating refreshes the cache and makes the system aware of the new Jenkins repository.

sudo apt update

2. Install Jenkins by running:

sudo apt install jenkins -y

3. To check if Jenkins is installed and running, run the following command:

sudo systemctl status jenkins

A bright green entry labelled active (running) should appear in the output, indicating that the service is running.

Checking if Jenkins is running.
4. Exit the status screen by pressing Ctrl+Z.

Note: If the Jenkins service is not running or active, run the following command to start it:

sudo systemctl enable --now jenkins
Step 4: Modify Firewall to Allow Jenkins
Allow Jenkins to communicate by setting up the default UFW firewall.

1. Open port 8080 by running the following commands:

sudo ufw allow 8080

sudo ufw status

Configuring the UFW firewall.
If you're using a different firewall application, follow its specific instructions to allow traffic on port 8080.

2. If you haven't configured the UFW firewall yet, it displays as inactive. Enable UFW by running:

sudo ufw enable

Enabling UFW firewall in Ubuntu.
Note: If you need to change the port, check out our article How to Change Port for Jenkins.

Step 5: Set up Jenkins
Follow the steps below to set up Jenkins and start using it:

1. Open a web browser, and navigate to your server' IP address. Use the following syntax:

http://ip_address_or_domain:8080

Use the actual IP address or domain name for the server you're using Jenkins on. For example, if you're running Jenkins locally, use localhost (127.0.0.1):

http://localhost:8080
A page opens prompting you to Unlock Jenkins. Obtain the required administrator password in the next step.

2. Obtain the default Jenkins unlock password by opening the terminal and running the following command:

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Obtaining the Jenkins administrator password.
3. The system returns an alphanumeric code. Enter that code in the Administrator password field and click Continue.

4. The setup prompts to either Install suggested plugins or Select plugins to install. It’s fine to simply install the suggested plugins.
You can always install more plugins later. The system continues the initial Jenkins setup.

5. The next step is the Create First Admin User. Enter the credentials you want to use for your Jenkins administrator, then click Save and Continue.

Creating the first admin user in Jenkins.
6. After this, you should set up the Instance Configuration. This is the preferred network address for this Jenkins installation. Confirm the address you want to use for your server. This is most likely the same address you used to get to this configuration page.

Configure the Jenkins instance.
Once you specify the Jenkins URL, click Save and Finish.

7. You should see a page that says Jenkins is ready! Click Start using Jenkins to open the Jenkins dashboard.

Complete Jenkins configuration on Ubuntu.
Note: Check out our guide on how to restart Jenkins manually - a useful practice while troubleshooting issues.

Conclusion

You should now have a working installation of Jenkins on your Ubuntu 22.04 system. Next, discover how to setup Jenkins on a Kubernetes cluster. If you are using a different distribution of Linux, we also have a guide on how to install Jenkins od Debian 10, and how to install Jenkins on CentOS.